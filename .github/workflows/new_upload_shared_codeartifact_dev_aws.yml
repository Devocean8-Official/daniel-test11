
name: New Upload Shared Package To DEV CodeArtifact

on:
  push:
    branches: ['main']
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      tags:
        description: 'Test scenario tags'

concurrency: dev_upload_environment

env:
  PYTHON_VERSION: "3.9"
  POETRY_VERSION: "1.4.2"
  POETRY_URL: https://install.python-poetry.org

jobs:
  upload-package-code-artifact:

    runs-on: [self-hosted, dev]

    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run flake8
        run: |
          pip install flake8
          flake8

      # Install Poetry
      - name: Install Poetry ${{ env.POETRY_VERSION }}
        run: |
          curl -sSL ${{ env.POETRY_URL }} | python - --version ${{ env.POETRY_VERSION }}
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      # Configure Code Artifact
      - name: Configure Code Artifact
        env:
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          AWS_DEFAULT_REGION: eu-north-1
          AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT_DEV }}
        run: |
          export SSH_AUTH_SOCK=${{ env.SSH_AUTH_SOCK }}
          export SSH_AGENT_PID=${{ env.SSH_AGENT_PID }}

          export AWS_DEFAULT_REGION=eu-north-1

          export AWS_CODEARTIFACT_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }}
          export AWS_CODEARTIFACT_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }}
          export AWS_CODEARTIFACT_ACCOUNT=${{ env.AWS_ACCOUNT }}

          aws codeartifact login --tool pip --repository devocean-repo --domain devocean-domain --domain-owner ${{ env.AWS_ACCOUNT }}
          export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain devocean-domain --domain-owner ${{ env.AWS_ACCOUNT }} --query authorizationToken --output text`

          $HOME/.local/bin/poetry source add --secondary devocean-repo https://devocean-domain-${{ env.AWS_ACCOUNT }}.d.codeartifact.eu-north-1.amazonaws.com/pypi/devocean-repo/simple/

          $HOME/.local/bin/poetry config http-basic.devocean-repo aws $CODEARTIFACT_AUTH_TOKEN

      - name: Install Deps
        run: |
          $HOME/.local/bin/poetry add pytest
          $HOME/.local/bin/poetry add pytest-custom_exit_code
          $HOME/.local/bin/poetry install

      - name: Run tests
        env:
          AWS_DEFAULT_REGION: us-west-2
          AWS_ACCESS_KEY_ID: testing
          AWS_SECRET_ACCESS_KEY: testing
          AWS_SECURITY_TOKEN: testing
          AWS_SESSION_TOKEN: testing
        run: |
          $HOME/.local/bin/poetry run pytest --suppress-no-test-exit-code -vvv

      - name: Upload packages to DEV CodeArtifact
        env:
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT_DEV }}
        run: |
          aws configure set default.region eu-north-1
          export AWS_DEFAULT_REGION=eu-north-1

          aws configure get default.region
          aws codeartifact login --tool pip --repository devocean-repo --domain devocean-domain --domain-owner ${{ env.AWS_ACCOUNT }}

          $HOME/.local/bin/poetry config repositories.devocean-repo https://devocean-domain-${{ env.AWS_ACCOUNT }}.d.codeartifact.eu-north-1.amazonaws.com/pypi/devocean-repo/

          export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain devocean-domain --domain-owner ${{ env.AWS_ACCOUNT }} --query authorizationToken --output text`
          $HOME/.local/bin/poetry config http-basic.devocean-repo aws $CODEARTIFACT_AUTH_TOKEN

          awk '!/Devocean8/' pyproject.toml > temp.txt && mv temp.txt pyproject.toml
          $HOME/.local/bin/poetry build
          $HOME/.local/bin/poetry publish -r devocean-repo

  report-to-slack-on-failure:
    runs-on: ubuntu-latest
    needs: [ upload-package-code-artifact ]
    if: always() && needs.upload-package-code-artifact.result == 'failure'
    steps:
      - name: report-to-slack
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.repository}} - AWS artifact upload failed\nhttps://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"}' ${{ secrets.SLACK_WEBHOOK_FOR_FAILED_ARTIFACT_UPLOAD }}
  report-to-slack-on-success:
    runs-on: ubuntu-latest
    needs: [ upload-package-code-artifact ]
    if: always() && needs.upload-package-code-artifact.result == 'success'
    steps:
      - name: report-to-slack
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ github.repository}} - AWS artifact upload to DEV succeeded. Yay!\nhttps://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"}' ${{ secrets.SLACK_WEBHOOK_FOR_SUCCESSFUL_ARTIFACT_UPLOAD }}

      